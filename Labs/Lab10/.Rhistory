#
# Author: Joyce Woznica
# Class: IST 719
# Date: 3/16/2020
# Subject: Lab 10, Week 10
#
# Lab 10
#---------------- Package Load -------------------
library(shiny)
server <- function(input, output)
{
output$myPie <- renderPlot(
{
pie (c(8,12,3), main = "Hello World")
})
}
pie (c(8,12,3), main = "Hello World")
library(shiny)
server <- function(input, output)
{
output$myPie <- renderPlot(
{
pie (c(8,12,3), main = "Hello World")
})
}
ui <- fluidPage(
mainPanel(plotOutput("myPie"))
)
shinyApp(ui,server)
ui <- fluidPage
(
mainPanel(paste("Joyce's Shiny App at ", now()))
)
# lab 10: App 1
#
library(shiny)
library(lubridate)
now()
ui <- fluidPage
(
mainPanel(paste("Joyce's Shiny App at ", now()))
)
runApop
runApp("/Users/joycewoznica/IST719/Labs/Lab10/app1")
ui <- fluidPage
(
mainPanel(paste("Joyce's Shiny App at ", now()))
)
shinyApp(ui.server)
server <- function(input, output)
{
}
ui <- fluidPage
(
mainPanel(paste("Joyce's Shiny App at ", now()))
)
shinyApp(ui.server)
my.title <- "Number of Sales per Year"
fname <- "/Users/joycewoznica/IST719/DataSets/forLabs/art.csv"
art <- read.csv(fname, header=TRUE, stringsAsFactors = FALSE)
barplot(table(art$year), main=my.title, border = "white",
col = "chartreuse4")
shiny::runApp('app2')
runApp('app1')
runApp('app3')
runApp('app3')
sub.index <- which(art$store == "Dublin")
sub.index
tmp.data <- art[sub.index, ]
pie(table(tmp.data$paper), col=c(watercolor.col, drawing.col),
border = NA)
watercolor.col <- "cadetblue1"
drawing.col <- "antiquewhite"
pie(table(tmp.data$paper), col=c(watercolor.col, drawing.col),
border = NA)
runApp('app4')
runApp('app4')
runApp('app4')
runApp('app4')
runApp('app4')
sales.by.paper <- tapply(tmp.data$total.sale, list(tmp.data$paper), sum)
barplot(sales.by.paper, beside=TRUE, main = "Income by Paper Type",
col = c(watercolor.col,drawing.col), border = NA)
runApp('app3')
runApp('app3')
runApp('app3')
runApp('app3')
runApp('app3')
runApp('app4')
runApp()
runApp()
runApp('app4')
runApp('app4')
tmp.data
sales.by.rep <- tapply(tmp.data$total.sale, list(tmp.data$rep), sum)
pie(sales.by.rep, border = NA, col = terrain.colors(length(sales.by.rep))
)
runApp('app5')
runApp()
runApp('app5')
runApp('app5')
my.dir <- "/Users/joycewoznica/IST719/DataSets/forLabs/"
libs <- read.csv(paste0(my.dir, "NewYorkLibraries.csv"), stringsAsFactors = FALSE, quote ="\"", header = TRUE)
my.ibs <- nrow(libs)
View(libs)
#
# lab 10: App 6
# Not working
#
library(shiny)
install.packages("leaflet")
library(leaflet)
library(ggmap)
my.dir <- "/Users/joycewoznica/IST719/DataSets/forLabs/"
libs <- read.csv(paste0(my.dir, "NewYorkLibraries.csv"), stringsAsFactors = FALSE, quote ="\"", header = TRUE)
my.ibs <- nrow(libs)
index <- sample(1:nrow(libs), 3)
#index <- sample(1:nrow(libs), 3)
addy <- paste(libs$ADDRESS[index], libs$CITY[index], libs$STABR[index], sep = ", ")
g.codes <- geocode(addys, source = "dsk")
addys <- paste(libs$ADDRESS[index], libs$CITY[index], libs$STABR[index], sep = ", ")
g.codes <- geocode(addys, source = "dsk")
## geocoding function using OSM Nominatim API
## details: http://wiki.openstreetmap.org/wiki/Nominatim
## made by: D.Kisler
library(jsonlite)
library(tidyverse)
nominatim_osm <- function(address = NULL)
{
if(suppressWarnings(is.null(address)))
return(data.frame())
tryCatch(
d <- jsonlite::fromJSON(
gsub('\\@addr\\@', gsub('\\s+', '\\%20', address),
'http://nominatim.openstreetmap.org/search/@addr@?format=json&addressdetails=0&limit=1')
), error = function(c) return(data.frame())
)
if(length(d) == 0) return(data.frame())
return(data.frame(lon = as.numeric(d$lon), lat = as.numeric(d$lat)))
}
#dplyr will be used to stack lists together into a data.frame and to get the pipe operator '%>%'
suppressPackageStartupMessages(library(dplyr))
#input addresses
addresses <- c("syracuse University, syracuse")
#
d <- suppressWarnings(lapply(addresses, function(address) {
#set the elapsed time counter to 0
t <- Sys.time()
#calling the nominatim OSM API
api_output <- nominatim_osm(address)
#get the elapsed time
t <- difftime(Sys.time(), t, 'secs')
#return data.frame with the input address, output of the nominatim_osm function and elapsed time
return(data.frame(address = address, api_output, elapsed_time = t))
}) %>%
#stack the list output into data.frame
bind_rows() %>% data.frame())
#output the data.frame content into console
d
d[2]
d[3]
NewLatLon<-function(addresses){
d <- suppressWarnings(lapply(addresses, function(address) {
#set the elapsed time counter to 0
t <- Sys.time()
#calling the nominatim OSM API
api_output <- nominatim_osm(address)
#get the elapsed time
t <- difftime(Sys.time(), t, 'secs')
#return data.frame with the input address, output of the nominatim_osm function and elapsed time
return(data.frame(address = address, api_output, elapsed_time = t))
}) %>%
#stack the list output into data.frame
bind_rows() %>% data.frame())
#output the data.frame content into console
return(d)
}
# test
NewLatLon(addresses)
latlon<-NewLatLon(addresses)
latlon$lon
latlon$lat
g.codes <- NewLatLon(addys)
addys
addy <- paste(libs$ADDRESS[index], libs$CITY[index], libs$STABR[index],
sep = ", ")
addy
g.codes <- NewLatLon(addy)
library(jsonlite)
library(tidyverse)
library(dplyr)
nominatim_osm <- function(address = NULL)
{
if(suppressWarnings(is.null(address)))
return(data.frame())
tryCatch(
d <- jsonlite::fromJSON(
gsub('\\@addr\\@', gsub('\\s+', '\\%20', address),
'http://nominatim.openstreetmap.org/search/@addr@?format=json&addressdetails=0&limit=1')
), error = function(c) return(data.frame())
)
if(length(d) == 0) return(data.frame())
return(data.frame(lon = as.numeric(d$lon), lat = as.numeric(d$lat)))
}
#dplyr will be used to stack lists together into a data.frame and to get the pipe operator '%>%'
suppressPackageStartupMessages(library(dplyr))
#input addresses
addresses <- c("syracuse University, syracuse")
#
d <- suppressWarnings(lapply(addresses, function(address) {
#set the elapsed time counter to 0
t <- Sys.time()
#calling the nominatim OSM API
api_output <- nominatim_osm(address)
#get the elapsed time
t <- difftime(Sys.time(), t, 'secs')
#return data.frame with the input address, output of the nominatim_osm function and elapsed time
return(data.frame(address = address, api_output, elapsed_time = t))
}) %>%
#stack the list output into data.frame
bind_rows() %>% data.frame())
#output the data.frame content into console
d
d[2]
d[3]
NewLatLon<-function(addresses){
d <- suppressWarnings(lapply(addresses, function(address) {
#set the elapsed time counter to 0
t <- Sys.time()
#calling the nominatim OSM API
api_output <- nominatim_osm(address)
#get the elapsed time
t <- difftime(Sys.time(), t, 'secs')
#return data.frame with the input address, output of the nominatim_osm function and elapsed time
return(data.frame(address = address, api_output, elapsed_time = t))
}) %>%
#stack the list output into data.frame
bind_rows() %>% data.frame())
#output the data.frame content into console
return(d)
}
# test
NewLatLon(addresses)
latlon<-NewLatLon(addresses)
latlon$lon
latlon$lat
# using NewLatLon instead of geocode
# these do not work - need zip code capability
NewLatLon(c("349 erie blvd east, dewit, ny"))
# using NewLatLon instead of geocode
# these do not work - need zip code capability
NewLatLon(c("349 erie blvd east, dewitt, ny"))
# just city, state works
NewLatLon(c("dewitt, ny"))
table(libs$CITY)
index <- which(libs$CITY %in% c("SYRACUSE", "DEWITT", "FAYETTEVILLE"))
addy <- paste(libs$ADDRESS[index], libs$CITY[index], libs$STABR[index],
sep = ", ")
# map no longer works when you run NewLatLon - must be a conflict with packages
map(database = "county", "new york", fill = TRUE, col = "orange")
g.codes <- NewLatLon(addy)
#
library(shiny)
install.packages("leaflet")
install.packages("leaflet")
library(leaflet)
library(ggmap)
my.dir <- "/Users/joycewoznica/IST719/DataSets/forLabs/"
libs <- read.csv(paste0(my.dir, "NewYorkLibraries.csv"), stringsAsFactors = FALSE, quote ="\"", header = TRUE)
my.ibs <- nrow(libs)
index <- sample(1:nrow(libs), input$num.libs)
index <- sample(1:nrow(libs), 3)
#index <- sample(1:nrow(libs), 3)
addys <- paste(libs$ADDRESS[index], libs$CITY[index], libs$STABR[index], sep = ", ")
g.codes <- NewLatLon(addys)
runApp('app6')
runApp('app6')
install.packages("leaflet")
runApp('app6')
install.packages("leaflet")
runApp('app6')
runApp('app6')
runApp('app6')
runApp('app6')
runApp('app6')
ny.libs <- nrow(libs)
runApp('app6')
runApp('app6')
runApp('app6')
shiny::runApp('layouts')
runApp('layout2')
runApp('layout2')
