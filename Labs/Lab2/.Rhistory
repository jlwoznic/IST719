m
f
x
f.y
m.y
m.tab <- table(m)
m.y[as.numeric((names(m,tab)))] <- as.numeric(m.tab)
m.tab <- table(m)
m.y[as.numeric((names(m.tab)))] <- as.numeric(m.tab)
f.tab <- table(f)
f.y[as.numeric((names(f.tab)))] <- as.numeric(f.tab)
age.freqs <- data.frame(ages - x, males = m.y, females = f.y)
age.freqs <- data.frame(ages = x, males = m.y, females = f.y)
max.x <- round(1,2 = max(age.freqs[,2:3]),0)
max.x <- round(1.2 = max(age.freqs[,2:3]),0)
max.x <- round(1.2 - max(age.freqs[,2:3]),0)
plot(c(-max,x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
plot(c(-max.x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
m.tab
colnames(tips)
# this does not work - could not get package to load/work
# supposedly lets you change the data
install.packages ("XQuartz")
fix(tips)
# recieve this error:
# Error in check_for_XQuartz() :
# X11 library is missing: install XQuartz from xquartz.macosforge.org
# view, but not change the data
View(tips)
# check the structure (which can be see by expanding in the global environment)
str(tips)
# look at certain values in the data
tips[1,]
tips[,1]
tips[3,3]
tips[1:3,]
length(tips)
dim(tips)
dim(tips)[1]
tips$time
tips[,"time"]
# distribution of total bill
# a plot that communicates the distribution
plot(tips$total_bill)
# another option sorting the bill
plot(sort(tips$total_bill))
boxplot(tips$total_bill)
hist(tips$total_bill)
# density
# shape of the distribution of the data
d <- density(tips$total_bill)
plot(d)
# JSON data
tfname <- "/Users/joycewoznica/IST719/Lab2/tweet.formatted.json"
library(jsonlite)
raw.tweet <- fromJSON(tfname, flatten=FALSE)
str(raw.tweet)
View(raw.tweet)
names(raw.tweet)
raw.tweet$text
raw.tweet$user$followers_count
raw.tweet[["user"]]
raw.tweet[["user"]]$followers_count
raw.tweet[["user"]][["followers_count"]]
# another method
install.packages("streamR")
library(streamR)
# a method that I tried
tweets <-readTweets(tfname, verbose=TRUE)
raw.tweet <- tweets[[1]]
names(raw.tweet)
raw.tweet$user$followers_count
raw.tweet[["user"]]
raw.tweet[["user"]]$followers_count
raw.tweet[["user"]][["followers_count"]]
# select a different file (formatted each tweet as a single line)
tfname <- "/Users/joycewoznica/IST719/Lab2/tweets5814.json"
con <- file(tfname, open = "r")
tweets.con <- stream_in(con)
close(con)
dim(tweets.con)
tweets.con$text[1:3]
boxplot(tweets.con$user$followers_count, horizontal=TRUE)
# shows highly skewed data, fix with log
boxplot(log10(tweets.con$user$followers_count), horizontal=TRUE)
task.time <- c(rnorm(n=30, mean=30, sd=2.25),
rnorm(n=30, mean=25, sd=1.5))
hist(task.time)
# repeat for different distributions
status <- c(rep("AMA", 30), rep("PRO", 30))
df <- data.frame(time=task.time, status=status)
View(df)
df.grouped <- aggregate(df$time, list(df$status), mean)
colnames(df.grouped) <- c("stat", "time")
df.grouped
barplot(df.grouped$time, names.arg=df.grouped$stat)
M.grouped <- tapply(df$time, list(df$status), mean)
class(M.grouped)
tapply(df$time, list(df$status), range)
range(task.time)
summary(task.time)
aggregate(df$time, list(df$status), summary)
table(df$status)
table(round(df$time,2))
df$sex <- sample(c("M", "F"), 60, replace=T)
aggregate(df$time, list(df$status, df$sex), mean)
M <- tapply(df$time, list(df$status, df$sex), mean)
barplot(M, beside = TRUE)
M2 <- tapply(df$time, list(df$sex, df$status), mean)
barplot(M2, beside = TRUE)
# reshaping with tidyr
# gather() makes "wide" data longer
# spread() makes "long" data wider
# separate() splits a single column into multiple columns
# unite() combines multiple columns into a single column
library(tidyr)
n <- 5
year <- 2001:(2000 + n)
q1 <- runif(n = n, min = 100, max = 120)
q2 <- runif(n = n, min = 103, max = 130)
q3 <- runif(n = n, min = 105, max = 140)
q4 <- runif(n = n, min = 108, max = 150)
df.wide <- data.frame(year,q1, q2, q3, q4)
# make wide longer (groups by second arg/last arguments)
gather(df.wide, qt, sales, q1:q4)
# passes df.wide to gather function
df.wide %>% gather(qt, sales, q1:q4)
df.long <- df.wide %>% gather(qt, sales, q1:q4)
o <- order (df.long$year, df.long$qt)
df.long <- df.long[o,]
gather(df.wide, qt, sales, q1, q2, q3, q4)
gather(df.wide, qt, sales, 2:5)
df <- data.frame(cat = rep(c("tap", "reg", "zed", "vum"), 3),
group = rep(letters[7:9], 4),
x = 1:12)
# makes a wide or matrix like format
spread(df, cat, x)
# using rect function to build a custom plot
install.packages("plotrix")
library(plotrix)
n <- 70
age.min <- 1
age.max <- 90
age.range <- c(age.min, age.max)
m <- round(rescale(rbeta(n, 5, 2,25), age.range), 0)
f <- round(rescale(rbeta(n, 5, 2, 0), age.range), 0)
x <- age.min:age.max
f.y <- m.y <- rep(0,length(x))
m.tab <- table(m)
m.y[as.numeric((names(m.tab)))] <- as.numeric(m.tab)
f.tab <- table(f)
f.y[as.numeric((names(f.tab)))] <- as.numeric(f.tab)
age.freqs <- data.frame(ages = x, males = m.y, females = f.y)
max.x <- round(1.2 - max(age.freqs[,2:3]),0)
plot(c(-max.x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
# start at 2.5 - 3:55 mark out of 13:36
age.freqs <- data.frame(ages = x, males = m.y, females = f.y)
age.freqs
max.x <- round(1.2 - max(age.freqs[,2:3]),0)
max.x
max.x <- round(1.2 * max(age.freqs[,2:3]),0)
max.x
plot(c(-max.x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
grid()
last.y <- 0
for (i in 1:90)
{
rect(xleft = 0, ybottom = last.y, xright = -age.freqs$males[i],
ytop = age.freqs$ages[i], col = "lightblue2", border = NA)
rect(xleft = 0, ybottom = last.y, xright = age.freqs$females[i],
ytop = age.freqs$ages[i], col="lightpink", border = NA)
last.y <- age.freqs$ages[i]
}
max.x <- round(1.2 * max(age.freqs[,2:3]),0)
plot(c(-max.x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
grid()
last.y <- 0
rect(xleft = 0, ybottom = last.y, xright = -age.freqs$males[i],
ytop = age.freqs$ages[i], col = "lightblue2", border = NA)
rect(xleft = 0, ybottom = last.y, xright = age.freqs$females[i],
ytop = age.freqs$ages[i], col="lightpink", border = NA)
grid()
last.y <- 0
for (i in 1:90)
{
rect(xleft = 0, ybottom = last.y, xright = -age.freqs$males[i],
ytop = age.freqs$ages[i], col = "lightblue2", border = NA)
rect(xleft = 0, ybottom = last.y, xright = age.freqs$females[i],
ytop = age.freqs$ages[i], col="lightpink", border = NA)
last.y <- age.freqs$ages[i]
}
grid()
last.y <- 0
for (i in 1:90)
{
rect(xleft = 0, ybottom = last.y, xright = -age.freqs$males[i],
ytop = age.freqs$ages[i], col = "lightblue2", border = NA)
rect(xleft = 0, ybottom = last.y, xright = age.freqs$females[i],
ytop = age.freqs$ages[i], col="lightpink", border = NA)
last.y <- age.freqs$ages[i]
}
n <- 7000
age.min <- 1
age.max <- 90
age.range <- c(age.min, age.max)
m <- round(rescale(rbeta(n, 5, 2,25), age.range), 0)
f <- round(rescale(rbeta(n, 5, 2, 0), age.range), 0)
x <- age.min:age.max
f.y <- m.y <- rep(0,length(x))
m.tab <- table(m)
m.y[as.numeric((names(m.tab)))] <- as.numeric(m.tab)
f.tab <- table(f)
f.y[as.numeric((names(f.tab)))] <- as.numeric(f.tab)
age.freqs <- data.frame(ages = x, males = m.y, females = f.y)
max.x <- round(1.2 * max(age.freqs[,2:3]),0)
plot(c(-max.x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
# rerun with n=7000
n <- 7000
age.min <- 1
age.max <- 90
age.range <- c(age.min, age.max)
m <- round(rescale(rbeta(n, 5, 2,25), age.range), 0)
f <- round(rescale(rbeta(n, 5, 2, 0), age.range), 0)
x <- age.min:age.max
f.y <- m.y <- rep(0,length(x))
m.tab <- table(m)
m.y[as.numeric((names(m.tab)))] <- as.numeric(m.tab)
f.tab <- table(f)
f.y[as.numeric((names(f.tab)))] <- as.numeric(f.tab)
age.freqs <- data.frame(ages = x, males = m.y, females = f.y)
max.x <- round(1.2 * max(age.freqs[,2:3]),0)
plot(c(-max.x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
grid()
last.y <- 0
for (i in 1:90)
{
rect(xleft = 0, ybottom = last.y, xright = -age.freqs$males[i],
ytop = age.freqs$ages[i], col = "lightblue2", border = NA)
rect(xleft = 0, ybottom = last.y, xright = age.freqs$females[i],
ytop = age.freqs$ages[i], col="lightpink", border = NA)
last.y <- age.freqs$ages[i]
}
# opens a dialog box and sets the file path to the file selected
fname <- file.choose()
# got from Kaggle, so only 7 observations
tips <- read.csv(file=fname, header = TRUE, stringsAsFactors = FALSE)
# check the column names
colnames(tips)
# this does not work - could not get package to load/work
# supposedly lets you change the data
install.packages ("XQuartz")
fix(tips)
# view, but not change the data
View(tips)
# check the structure (which can be see by expanding in the global environment)
str(tips)
# look at certain values in the data
tips[1,]
tips[,1]
tips[3,3]
tips[1:3,]
length(tips)
dim(tips)
dim(tips)[1]
tips$time
tips[,"time"]
# distribution of total bill
# a plot that communicates the distribution
plot(tips$total_bill)
# another option sorting the bill
plot(sort(tips$total_bill))
boxplot(tips$total_bill)
hist(tips$total_bill)
# density
# shape of the distribution of the data
d <- density(tips$total_bill)
plot(d)
# JSON data
tfname <- "/Users/joycewoznica/IST719/Lab2/tweet.formatted.json"
library(jsonlite)
raw.tweet <- fromJSON(tfname, flatten=FALSE)
str(raw.tweet)
View(raw.tweet)
names(raw.tweet)
raw.tweet$text
raw.tweet$user$followers_count
raw.tweet[["user"]]
raw.tweet[["user"]]$followers_count
raw.tweet[["user"]][["followers_count"]]
# another method
install.packages("streamR")
library(streamR)
# a method that I tried
tweets <-readTweets(tfname, verbose=TRUE)
raw.tweet <- tweets[[1]]
View(raw.tweet)
names(raw.tweet)
raw.tweet$text
raw.tweet$user$followers_count
raw.tweet[["user"]]
raw.tweet[["user"]]$followers_count
raw.tweet[["user"]][["followers_count"]]
# select a different file (formatted each tweet as a single line)
tfname <- "/Users/joycewoznica/IST719/Lab2/tweets5814.json"
con <- file(tfname, open = "r")
tweets.con <- stream_in(con)
close(con)
dim(tweets.con)
tweets.con$text[1:3]
boxplot(tweets.con$user$followers_count, horizontal=TRUE)
# shows highly skewed data, fix with log
boxplot(log10(tweets.con$user$followers_count), horizontal=TRUE)
task.time <- c(rnorm(n=30, mean=30, sd=2.25),
rnorm(n=30, mean=25, sd=1.5))
hist(task.time)
# repeat for different distributions
status <- c(rep("AMA", 30), rep("PRO", 30))
df <- data.frame(time=task.time, status=status)
View(df)
df.grouped <- aggregate(df$time, list(df$status), mean)
colnames(df.grouped) <- c("stat", "time")
df.grouped
barplot(df.grouped$time, names.arg=df.grouped$stat)
M.grouped <- tapply(df$time, list(df$status), mean)
class(M.grouped)
tapply(df$time, list(df$status), range)
range(task.time)
summary(task.time)
aggregate(df$time, list(df$status), summary)
table(df$status)
table(round(df$time,2))
df$sex <- sample(c("M", "F"), 60, replace=T)
aggregate(df$time, list(df$status, df$sex), mean)
M <- tapply(df$time, list(df$status, df$sex), mean)
barplot(M, beside = TRUE)
M2 <- tapply(df$time, list(df$sex, df$status), mean)
barplot(M2, beside = TRUE)
library(tidyr)
n <- 5
year <- 2001:(2000 + n)
year <- 2001:(2000 + n)
q1 <- runif(n = n, min = 100, max = 120)
q2 <- runif(n = n, min = 103, max = 130)
q3 <- runif(n = n, min = 105, max = 140)
q4 <- runif(n = n, min = 108, max = 150)
df.wide <- data.frame(year,q1, q2, q3, q4)
# make wide longer (groups by second arg/last arguments)
gather(df.wide, qt, sales, q1:q4)
# passes df.wide to gather function
df.wide %>% gather(qt, sales, q1:q4)
df.long <- df.wide %>% gather(qt, sales, q1:q4)
o <- order (df.long$year, df.long$qt)
df.long <- df.long[o,]
gather(df.wide, qt, sales, q1, q2, q3, q4)
gather(df.wide, qt, sales, 2:5)
df <- data.frame(cat = rep(c("tap", "reg", "zed", "vum"), 3),
group = rep(letters[7:9], 4),
x = 1:12)
# makes a wide or matrix like format
spread(df, cat, x)
# using rect function to build a custom plot
install.packages("plotrix")
library(plotrix)
n <- 70
age.min <- 1
age.max <- 90
age.range <- c(age.min, age.max)
m <- round(rescale(rbeta(n, 5, 2,25), age.range), 0)
f <- round(rescale(rbeta(n, 5, 2, 0), age.range), 0)
x <- age.min:age.max
f.y <- m.y <- rep(0,length(x))
m.tab <- table(m)
m.y[as.numeric((names(m.tab)))] <- as.numeric(m.tab)
f.tab <- table(f)
f.y[as.numeric((names(f.tab)))] <- as.numeric(f.tab)
age.freqs <- data.frame(ages = x, males = m.y, females = f.y)
max.x <- round(1.2 * max(age.freqs[,2:3]),0)
plot(c(-max.x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
grid()
last.y <- 0
for (i in 1:90)
{
rect(xleft = 0, ybottom = last.y, xright = -age.freqs$males[i],
ytop = age.freqs$ages[i], col = "lightblue2", border = NA)
rect(xleft = 0, ybottom = last.y, xright = age.freqs$females[i],
ytop = age.freqs$ages[i], col="lightpink", border = NA)
last.y <- age.freqs$ages[i]
}
# rerun with n=7000
n <- 7000
age.min <- 1
age.max <- 90
age.range <- c(age.min, age.max)
m <- round(rescale(rbeta(n, 5, 2,25), age.range), 0)
f <- round(rescale(rbeta(n, 5, 2, 0), age.range), 0)
x <- age.min:age.max
f.y <- m.y <- rep(0,length(x))
m.tab <- table(m)
m.y[as.numeric((names(m.tab)))] <- as.numeric(m.tab)
f.tab <- table(f)
f.y[as.numeric((names(f.tab)))] <- as.numeric(f.tab)
age.freqs <- data.frame(ages = x, males = m.y, females = f.y)
max.x <- round(1.2 * max(age.freqs[,2:3]),0)
plot(c(-max.x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
grid()
last.y <- 0
for (i in 1:90)
{
rect(xleft = 0, ybottom = last.y, xright = -age.freqs$males[i],
ytop = age.freqs$ages[i], col = "lightblue2", border = NA)
rect(xleft = 0, ybottom = last.y, xright = age.freqs$females[i],
ytop = age.freqs$ages[i], col="lightpink", border = NA)
last.y <- age.freqs$ages[i]
}
# got from Kaggle, so only 7 observations
tips <- read.csv(file=fname, header = TRUE, stringsAsFactors = FALSE)
# check the column names
colnames(tips)
# this does not work - could not get package to load/work
# supposedly lets you change the data
install.packages ("XQuartz")
fix(tips)
# view, but not change the data
View(tips)
# check the structure (which can be see by expanding in the global environment)
str(tips)
# look at certain values in the data
tips[1,]
tips[,1]
tips[3,3]
tips[1:3,]
length(tips)
dim(tips)
dim(tips)[1]
tips$time
tips[,"time"]
# distribution of total bill
# a plot that communicates the distribution
plot(tips$total_bill)
# another option sorting the bill
plot(sort(tips$total_bill))
boxplot(tips$total_bill)
my.letters <- sample(letters[7:9], size = 50, replace =T)barplot(table(my.letters))
my.letters <- sample(letters[7:9], size = 50, replace =T)
barplot(table(my.letters))
my.letters <- sample(letters[7:9], size = 50, replace =T)
barplot(table(my.letters))
# using rect function to build a custom plot
install.packages("plotrix")
library(plotrix)
n <- 70
age.min <- 1
age.max <- 90
age.range <- c(age.min, age.max)
m <- round(rescale(rbeta(n, 5, 2,25), age.range), 0)
f <- round(rescale(rbeta(n, 5, 2, 0), age.range), 0)
x <- age.min:age.max
f.y <- m.y <- rep(0,length(x))
m.tab <- table(m)
m.y[as.numeric((names(m.tab)))] <- as.numeric(m.tab)
f.tab <- table(f)
f.y[as.numeric((names(f.tab)))] <- as.numeric(f.tab)
age.freqs <- data.frame(ages = x, males = m.y, females = f.y)
max.x <- round(1.2 * max(age.freqs[,2:3]),0)
plot(c(-max.x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
grid()
last.y <- 0
for (i in 1:90)
{
rect(xleft = 0, ybottom = last.y, xright = -age.freqs$males[i],
ytop = age.freqs$ages[i], col = "lightblue2", border = NA)
rect(xleft = 0, ybottom = last.y, xright = age.freqs$females[i],
ytop = age.freqs$ages[i], col="lightpink", border = NA)
last.y <- age.freqs$ages[i]
}
# rerun with n=7000
n <- 7000
age.min <- 1
age.max <- 90
age.range <- c(age.min, age.max)
m <- round(rescale(rbeta(n, 5, 2,25), age.range), 0)
f <- round(rescale(rbeta(n, 5, 2, 0), age.range), 0)
x <- age.min:age.max
f.y <- m.y <- rep(0,length(x))
m.tab <- table(m)
m.y[as.numeric((names(m.tab)))] <- as.numeric(m.tab)
f.tab <- table(f)
f.y[as.numeric((names(f.tab)))] <- as.numeric(f.tab)
age.freqs <- data.frame(ages = x, males = m.y, females = f.y)
max.x <- round(1.2 * max(age.freqs[,2:3]),0)
plot(c(-max.x,max.x), c(0,100), type="n", bty = "n", xaxt = "n",
ylab = "Age", xlab = "Frequency", main = "Sample Age Distribution")
grid()
last.y <- 0
for (i in 1:90)
{
rect(xleft = 0, ybottom = last.y, xright = -age.freqs$males[i],
ytop = age.freqs$ages[i], col = "lightblue2", border = NA)
rect(xleft = 0, ybottom = last.y, xright = age.freqs$females[i],
ytop = age.freqs$ages[i], col="lightpink", border = NA)
last.y <- age.freqs$ages[i]
}
