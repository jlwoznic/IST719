agg.dat$index <- round(rescale(x = agg.dat$victims, c(1, num.cols)),0)
agg.dat$index
# assign the color based on the index
agg.dat$color <- my.color.vec(agg.dat$index)
agg.dat
# assign the color based on the index
agg.dat$color <- my.color.vec[agg.dat$index]
agg.dat
a <- shooting$State[1]
a <- shootings$State[1]
gsub("[[:upper:]]|\\s+|e", "", a)
sessionInfo()
install.packages("devtools")
library(devtools)
devtools::install_github("ropensci/rnoaa")
ncdc(datasetid = 'GHCND', stationid = 'GHCND:USW00014895', startdate = '2013-10-01',
enddate = '2013-12-01')
ncdc(datasetid = 'GHCND', stationid = 'GHCND:USW00014895', startdate = '2013-10-01',
enddate = '2013-12-01')
library(rnoaa)
#devtools::install_github("Ram-N/weatherData")
devtools::install_github("ropensci/rnoaa")
library(rnoaa)
ncdc(datasetid = 'GHCND', stationid = 'GHCND:USW00014895',
startdate = '2013-10-01', enddate = '2013-12-01')
devtools::install_github("Ram-N/weatherData")
history(set_location(territory = "Hawaii", city = "Honolulu"), "20130101")
# wunderground
loc <- set_location(territory="New York", city="Vernon")
library(rwunderground)
devtools::install_github("Ram-N/weatherData")
library(rwunderground)
library(rnoaa)
install.packages("rwunderground")
install.packages("rnoaa")
library(rnoaa)
ncdc(datasetid = 'GHCND', stationid = 'GHCND:USW00014895',
startdate = '2013-10-01', enddate = '2013-12-01')
# wunderground
loc <- set_location(territory="New York", city="Vernon")
library(rwunderground)
# wunderground
loc <- rwunderground::set_location(territory="New York", city="Vernon")
update_packages()
sessionInfo()
#
# Author: Joyce Woznica
# Class: IST 719
# Date: 2/23/2020
# Subject: Lab 7, Week 7
#
# Lab 7
#---------------- Package Load -------------------
library (maps)
library (mapproj)
install.packages("raster")
library(raster)
library(plotrix)
install.packages("devtools")
devtools::install_github("ropenscilabs/rnaturalearthdata")
install.packages("rnaturalearthhires",
repos = "http://packages.ropensci.org",
type = "source")
library(rnaturalearth)
library(sp)
library(jsonlite)
library(tidyverse)
nominatim_osm <- function(address = NULL)
{
if(suppressWarnings(is.null(address)))
return(data.frame())
tryCatch(
d <- jsonlite::fromJSON(
gsub('\\@addr\\@', gsub('\\s+', '\\%20', address),
'http://nominatim.openstreetmap.org/search/@addr@?format=json&addressdetails=0&limit=1')
), error = function(c) return(data.frame())
)
if(length(d) == 0) return(data.frame())
return(data.frame(lon = as.numeric(d$lon), lat = as.numeric(d$lat)))
}
#dplyr will be used to stack lists together into a data.frame and to get the pipe operator '%>%'
suppressPackageStartupMessages(library(dplyr))
#input addresses
addresses <- c("syracuse University, syracuse")
#
d <- suppressWarnings(lapply(addresses, function(address) {
#set the elapsed time counter to 0
t <- Sys.time()
#calling the nominatim OSM API
api_output <- nominatim_osm(address)
#get the elapsed time
t <- difftime(Sys.time(), t, 'secs')
#return data.frame with the input address, output of the nominatim_osm function and elapsed time
return(data.frame(address = address, api_output, elapsed_time = t))
}) %>%
#stack the list output into data.frame
bind_rows() %>% data.frame())
#output the data.frame content into console
d
d[2]
d[3]
NewLatLon<-function(addresses){
d <- suppressWarnings(lapply(addresses, function(address) {
#set the elapsed time counter to 0
t <- Sys.time()
#calling the nominatim OSM API
api_output <- nominatim_osm(address)
#get the elapsed time
t <- difftime(Sys.time(), t, 'secs')
#return data.frame with the input address, output of the nominatim_osm function and elapsed time
return(data.frame(address = address, api_output, elapsed_time = t))
}) %>%
#stack the list output into data.frame
bind_rows() %>% data.frame())
#output the data.frame content into console
return(d)
}
# test
NewLatLon(addresses)
latlon<-NewLatLon(addresses)
latlon$lon
latlon$lat
#---------------- Start with Maps --------------------------
df <- read.csv ("/Users/joycewoznica/IST719/Labs/Lab7/maplecturedata.csv")
# plot NY state
plot (df$x, df$y)
polygon(df$x, df$y, col = "firebrick1", border = NA)
map(database = "world")
map("world", regions = "India")
map("world", regions = "China")
map("world", regions = c("India", "Pakinstan"),
fill = TRUE, col = c("orange", "brown"))
map("world", regions = "Finland")
m <- map("state")
plot(m$x, m$y)
library (maps)
library (mapproj)
install.packages("raster")
library(raster)
library(plotrix)
install.packages("raster")
install.packages("devtools")
devtools::install_github("ropenscilabs/rnaturalearthdata")
install.packages("rnaturalearthhires",
repos = "http://packages.ropensci.org",
type = "source")
install.packages("rnaturalearth")
library(rnaturalearth)
library(sp)
install.packages("devtools")
install.packages("devtools")
# plot NY state
plot (df$x, df$y)
polygon(df$x, df$y, col = "firebrick1", border = NA)
map(database = "world")
map("world", regions = "India")
# Natural Earth
india <- ne_states(country="India")
map(india)
#
# Author: Joyce Woznica
# Class: IST 719
# Date: 2/23/2020
# Subject: Lab 7, Week 7
#
# Lab 7
#---------------- Package Load -------------------
library (maps)
library (mapproj)
install.packages("raster")
library(raster)
library(plotrix)
install.packages("devtools")
devtools::install_github("ropenscilabs/rnaturalearthdata")
install.packages("rnaturalearthhires",
repos = "http://packages.ropensci.org",
type = "source")
devtools::install_github("ropenscilabs/rnaturalearthdata")
install.packages("rnaturalearthhires",
repos = "http://packages.ropensci.org",
type = "source")
install.packages("rnaturalearth")
library(rnaturalearth)
library(sp)
#---------------- Start with Maps --------------------------
df <- read.csv ("/Users/joycewoznica/IST719/Labs/Lab7/maplecturedata.csv")
# plot NY state
plot (df$x, df$y)
polygon(df$x, df$y, col = "firebrick1", border = NA)
map(database = "world")
#--------------- Choropleth Map Problem -------------------
# thermatic maps, color maps to
fname <- "/Users/joycewoznica/IST719/Labs/Lab7/shootings.rda"
load(fname)
View(shootings)
shootings$Total.Number.of.Victims
sort(shootings$State)
# need to trim the state
tmp.vec <- gsub("^\\s+|\\s+$", "", shootings$State)
sort(tmp.vec)
shootings$State <- tmp.vec
agg.dat <- aggregate(shootings$Total.Number.of.Victims,
list(shootings$State),
sum)
colnames(agg.dat) <- c("state", "victims")
# can go higher in colors if you want
num.cols <- 10
my.color.vec <- rev(heat.colors(num.cols))
pie(rep(1, num.cols), col = my.color.vec)
# plotrix
agg.dat$index <- round(rescale(x = agg.dat$victims, c(1, num.cols)),0)
# assign the color based on the index
agg.dat$color <- my.color.vec[agg.dat$index]
# data frame has each state, # of victims and colors for each state by # of victims
m <- map("state")
# data frame has each state, # of victims and colors for each state by # of victims
m <- map("state")
m$names
state.order <- match.map(database="state", regions = agg.dadta,
exact = FALSE, warning = TRUE)
state.order <- match.map(database="state", regions = agg.dat$state,
exact = FALSE, warning = TRUE)
state.order <- match.map(database="state", regions = agg.dat$state,
exact = FALSE, warn = TRUE)
cbind(m$namesk, agg.dat$state[state.order])
map("state", col = agg.dat$color[state.order], fill = TRUE,
resolution = 0, lty = 1, projection = "polyconic", border = "tan")
map("state", col = agg.dat$color[state.order], fill = TRUE,
resolution = 0, lty = 1, projection = "polyconic", border = "tan")
#-------------------- Points and geocoding --------------------------
library(ggmap)
libs <- read.csv("/Users/joycewoznica/IST719/Labs/Lab7/newyorklibraries.csv",
header=TRUE, quote ="\"",
stringsAsFactors = FALSE)
mqp("world")
mqp("world")
#
# Author: Joyce Woznica
# Class: IST 719
# Date: 2/23/2020
# Subject: Lab 7, Week 7
#
# Lab 7
#---------------- Package Load -------------------
library (maps)
library (mapproj)
install.packages("raster")
install.packages("raster")
library(raster)
library(plotrix)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("ropenscilabs/rnaturalearthdata", force=TRUE)
install.packages("rnaturalearthhires",
repos = "http://packages.ropensci.org",
type = "source")
install.packages("rnaturalearth")
install.packages("rnaturalearth")
library(rnaturalearth)
library(sp)
#-------------------- Points and geocoding --------------------------
library(ggmap)
mqp("world")
map(database = "world")
points(0,0, col="red", cex=3, pch=8)
abline(h = 43, col = "blue", lty = 3) #lat
abline(v = 076, col = "blue", lty = 3) #long
us.cities
map("state")
map("state")
my.cols <- rep(rgb(1, 0., 0.2, 0.7), lenth(us.cities$name))
my.cols <- rep(rgb(1, 0., 0.2, 0.7), length(us.cities$name))
my.cols[us.cities$capital > 0] <- rgb(0.2, 0.6, 1, 0.9)
points(us.cities$long, us$cities$lat, col = my.cols, pch = 16,
cex = rescale(us.cities$pop, c(0.5,7)))
points(us.cities$long, us.cities$lat, col = my.cols, pch = 16,
cex = rescale(us.cities$pop, c(0.5,7)))
map(database = "world")
mqp("world")
points(0,0, col="red", cex=3, pch=8)
abline(h = 43, col = "blue", lty = 3) #lat
abline(v = 076, col = "blue", lty = 3) #long
map("state")
my.cols <- rep(rgb(1, 0., 0.2, 0.7), length(us.cities$name))
my.cols[us.cities$capital > 0] <- rgb(0.2, 0.6, 1, 0.9)
points(us.cities$long, us.cities$lat, col = my.cols, pch = 16,
cex = rescale(us.cities$pop, c(0.5,7)))
#---------------- New Lat Lon -----------------------------
## geocoding function using OSM Nominatim API
## details: http://wiki.openstreetmap.org/wiki/Nominatim
## made by: D.Kisler
library(jsonlite)
library(tidyverse)
nominatim_osm <- function(address = NULL)
{
if(suppressWarnings(is.null(address)))
return(data.frame())
tryCatch(
d <- jsonlite::fromJSON(
gsub('\\@addr\\@', gsub('\\s+', '\\%20', address),
'http://nominatim.openstreetmap.org/search/@addr@?format=json&addressdetails=0&limit=1')
), error = function(c) return(data.frame())
)
if(length(d) == 0) return(data.frame())
return(data.frame(lon = as.numeric(d$lon), lat = as.numeric(d$lat)))
}
#dplyr will be used to stack lists together into a data.frame and to get the pipe operator '%>%'
suppressPackageStartupMessages(library(dplyr))
#input addresses
addresses <- c("syracuse University, syracuse")
#
d <- suppressWarnings(lapply(addresses, function(address) {
#set the elapsed time counter to 0
t <- Sys.time()
#calling the nominatim OSM API
api_output <- nominatim_osm(address)
#get the elapsed time
t <- difftime(Sys.time(), t, 'secs')
#return data.frame with the input address, output of the nominatim_osm function and elapsed time
return(data.frame(address = address, api_output, elapsed_time = t))
}) %>%
#stack the list output into data.frame
bind_rows() %>% data.frame())
#output the data.frame content into console
d
d[2]
d[3]
NewLatLon<-function(addresses){
d <- suppressWarnings(lapply(addresses, function(address) {
#set the elapsed time counter to 0
t <- Sys.time()
#calling the nominatim OSM API
api_output <- nominatim_osm(address)
#get the elapsed time
t <- difftime(Sys.time(), t, 'secs')
#return data.frame with the input address, output of the nominatim_osm function and elapsed time
return(data.frame(address = address, api_output, elapsed_time = t))
}) %>%
#stack the list output into data.frame
bind_rows() %>% data.frame())
#output the data.frame content into console
return(d)
}
# test
NewLatLon(addresses)
latlon<-NewLatLon(addresses)
latlon$lon
latlon$lat
addresses
# using NewLatLon instead of geocode
NewLatLon("349 erie blvd east, dewit, ny")
# using NewLatLon instead of geocode
NewLatLon(c("349 erie blvd east, dewit, ny"))
NewLatLon(c("dewit, ny"))
nominatim_osm("3649 erie blvd east, dewit, ny")
nominatim_osm(c("3649 erie blvd east, dewit, ny"))
NewLatLon(c("dewit", "ny"))
NewLatLon(c("dewit", "dewit ny"))
NewLatLon(c("new york, ny"))
NewLatLon(c("dewit, ny"))
table(libs$CITY)
NewLatLon(c("dewitt, ny"))
index <- which(libs$CITY %in% c("SYRACUSE", "DEWITT", "FAYETTEVILLE"))
addy <- paste(libs$ADDRESS[index], libs$CITY[index], libs$STABR[index],
sep = ", ")
table(libs$CITY)
index <- which(libs$CITY %in% c("SYRACUSE", "DEWITT", "FAYETTEVILLE"))
addy <- paste(libs$ADDRESS[index], libs$CITY[index], libs$STABR[index],
sep = ", ")
map("county", "new york", fill = TRUE, col = "orange")
map(database = "county", "new york", fill = TRUE, col = "orange")
g.codes <- NewLatLon(addy)
points(g.code$lon, g.codes$lat, col = "blue",
cex = 1.1, pch = 16)
points(g.codes$lon, g.codes$lat, col = "blue",
cex = 1.1, pch = 16)
#
# Author: Joyce Woznica
# Class: IST 719
# Date: 2/23/2020
# Subject: Lab 7, Week 7
#
# Lab 7
#---------------- Package Load -------------------
library (maps)
library (mapproj)
library(raster)
library(plotrix)
# map no longer works when you run NewLatLon - must be a conflict with packages
map(database = "county", "new york", fill = TRUE, col = "orange")
View(g.codes)
View(g.codes)
library (maps)
library (mapproj)
install.packages("raster")
library(raster)
library(plotrix)
#------------------- ggmap ----------------------------
library(ggmap)
library(plotrix)
reported <- read.csv("/Users/joycewoznica/IST719/Labs/Lab7/indiareportedrapes.csv",
header = TRUE,
quote = "\"",
stringsAsFactors = FALSE)
india <- raster::getData("GADM", country="IND", level=1)
cbind(unique(reported$Area_Name), india$NAME_1)
india$NAME_1[india$NAME_1 == "NCT of Delhi"] <- "Delhi"
india$NAME_1 <- gsub(" and ", " & ", india$NAME_1)
india$NAME_1
map.df <- fortify(india, region = "NAME_1")
head(map.df)
crimes <- aggregate(reported$Cases, list(reported$Area_Name), sum)
View(crimes)
View(crimes)
colnames(crimes) <- c("id", "ReportedRapes")
crimes[order(crimes$ReportedRapes),]
my.map <- merge(x=map.df, y = crimes, by = "id")
View(my.map)
View(my.map)
length(crimes)
crims
crimes
View(crimes)
View(crimes)
length(crimes[2])
numrows(my.map)
nrow(my.map)
library (maps)
library (mapproj)
install.packages("raster")
library(raster)
library(plotrix)
#-------------------- Points and geocoding --------------------------
library(ggmap)
library(gpclib)
library(rgeos)
library(maptools)
install.packages("gpclib")
library(gpclib)
library(rgeos)
library(maptools)
install.packages("broom")
liobrary(broom)
#map.df <- fortify(india, region = "NAME_1")
map.df <- as.data.frame(tidy(index,region="NAME_1"))
library(broom)
#map.df <- fortify(india, region = "NAME_1")
map.df <- as.data.frame(tidy(index,region="NAME_1"))
head(map.df)
crimes <- aggregate(reported$Cases, list(reported$Area_Name), sum)
colnames(crimes) <- c("id", "ReportedRapes")
crimes[order(crimes$ReportedRapes),]
# this is incorrect!
my.map <- merge(x=map.df, y = crimes, by = "id")
View(map.df)
View(map.df)
View(my.map)
View(my.map)
shape.data.dir <- "/Users/joycewoznica/IST719/Labs/Lab7/shapefiles/"
library(stringr)
install.packages("rgdal")
library(rgdal)
install.packages("raster")
library(raster)
install.packages("TeachingDemos")
library(TeachingDemos)
install.packages("raster")
bikes <- readRDS(paste0(shape.data.dir, "bikes.rds"))
nypp <- readOGR(paste0(shape.data.dir, "nyct2010_17a"),
"nyct2010", stringsAsFactors = FALSE)
syr.neighborhood <- readOGR("/Users/joycewoznica/IST719/Labs/Lab7/syracuse-neighborhood_ny.geojson")
syr.neighborhood <- readOGR("/Users/joycewoznica/IST719/Labs/Lab7/syracuse-neighborhoods_ny.geojson")
par(mar = c(0.5, 0.5, 0.5, 0.5))
plot(nypp, border = "bisque4", lwd = 0.5)
# zoom in
zoomPlot(c(978000, 999800), ylim = c(185000,225000))
# zoom in
zoomplot(c(978000, 999800), ylim = c(185000,225000))
df <- data.frame(lat = bikes$start.station.latitude,
lon = bikes$start.station.longitude)
head(df)
point.tab <- sort(table(paste(df$lat, df$lon)), decreasing = TRUE)
point.tab[1:3]
df.2 <- data.frame(lat = as.numeric(word(names(point.tab),1)),
lon = as.numeric(word(names(point.tab),2)))
View(df.2)
df.2$size <- as.numeric(point.tab)
df.2 <- data.frame(lat = as.numeric(word(names(point.tab),1)),
lon = as.numeric(word(names(point.tab),2)))
df.2$size <- as.numeric(point.tab)
# now add the points
coordinates(df.2) <- -long + lat
crs(df.2) <- CRS("+proj=longlat + datum=WG584")
df.2 <- spTransform(df.2, crs(nypp))
tmp.size <- 0.2 + (2*df.2$size/max(df.2$size))
points(df.2$lon, df.2$lat, col = "red", pch = 19, cex = tmp.size)
df <- data.frame(lat = bikes$start.station.latitude,
lon = bikes$start.station.longitude)
head(df)
point.tab <- sort(table(paste(df$lat, df$lon)), decreasing = TRUE)
point.tab[1:3]
df.2 <- data.frame(lat = as.numeric(word(names(point.tab),1)),
lon = as.numeric(word(names(point.tab),2)))
df.2$size <- as.numeric(point.tab)
# now add the points
coordinates(df.2) <- -lon + lat
# now add the points
coordinates(df.2) <- ~lon + lat
crs(df.2) <- CRS("+proj=longlat + datum=WG584")
df.2 <- spTransform(df.2, crs(nypp))
tmp.size <- 0.2 + (2*df.2$size/max(df.2$size))
points(df.2$lon, df.2$lat, col = "red", pch = 19, cex = tmp.size)
