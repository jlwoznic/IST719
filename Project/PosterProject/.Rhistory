subtitle="All Incidents with Precipitation Reported")
g <- g + geom_bar(position="dodge")
g <- g + scale_fill_manual(name="Precipitation", values= my.cols)
g <- g + xlab("Reported Precipitation") + ylab("Number of Incidents")
g <- g + theme(axis.text.x = element_text(angle = 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5))
g
View(big.weather.df)
View(big.weather.df)
# Can we check how many have both Clear and Hot then Clear and Warm and Clear and Humid and Cloudy and Hot/Warm/Humid
big.weather.df <- subset(big.weather.df, select = -Incident.Type)
hot.humid.df <- subset(big.weather.df, Sky == "Clear" && (Temp == "Hot" | Temp = "Warm"), select = c(Track, Sky, Temp, Prec))
hot.humid.df <- subset(big.weather.df, WC.Sky == "Clear" && (WC.Temp == "Hot" | WC.Temp = "Warm"), select = c(Track, WC.Sky, WC.Temp, WC.Prec))
View(hot.humid.df)
View(hot.humid.df)
clear.cold.df <- subset(big.weather.df, WC.Sky == "Clear" && WC.Temp == "Cold", select=c(Track, WC.Sky, WC.Temp. WC.Prec)
clear.cold.df <- subset(big.weather.df, WC.Sky == "Clear" && WC.Temp == "Cold", select=c(Track, WC.Sky, WC.Temp, WC.Prec)
)
View(clear.cold.df)
View(clear.cold.df)
clear.cold.df <- subset(big.weather.df, WC.Sky == "Clear", select=c(Track, WC.Sky, WC.Temp, WC.Prec))
View(clear.cold.df)
View(clear.cold.df)
clear.cold.df <- subset(clear.cold.df, WC.Temp == "Cold", select=c(Track, WC.Sky, WC.Temp, WC.Prec))
# easy weather
inc.by.weather <- as.data.frame(cbind(rData$Track, rData$Incident.Type, rData$Weather.Conditions))
colnames(inc.by.weather) <- c("Track", "Incident.Type", "Weather.Conditions")
#inc.by.weather$id <- as.numeric(inc.by.weather$id)
inc.by.weather <- inc.by.weather[which(inc.by.weather$Weather.Conditions != " "),]
inc.by.weather$Weather.Conditions <- tolower(inc.by.weather$Weather.Conditions)
tot.rows <- length(inc.by.weather$Track)
big.weather.df <- inc.by.weather
big.weather.df$WC.Temp <- ""
big.weather.df$WC.Sky <- ""
big.weather.df$WC.Prec <- ""
big.weather.df$WC.Other <- ""
# weather
# first build a smaller df of just weather information about the incident (that matches up to the incident type)
i <- 1
while (i <= tot.rows)
{
ext.weather.df <- NULL
# NULL out variables
WC.Prec <- ""
WC.Other <- ""
WC.Sky <- ""
WC.Temp <- ""
# get date from the race tack data
weather.test <- inc.by.weather$Weather.Conditions[i]
# now see what matches
# WC.Prec
if (grepl("rain",weather.test)) WC.Prec <- "Rain"
if (grepl("shower", weather.test)) WC.Prec <- "Showers"
if (grepl("fog", weather.test)) WC.Prec <- "Foggy"
if (grepl("thunder", weather.test)) WC.Prec <- "Thunder"
if (grepl("humid", weather.test)) WC.Prec <- "Humid"
if (grepl("muggy", weather.test)) WC.Prec <- "Humid"
if (grepl("dry", weather.test)) WC.Prec <- "Dry"
# WC.Sky
if (grepl("sun", weather.test)) WC.Sky <- "Sunny"
if (grepl("cloud", weather.test)) WC.Sky <- "Cloudy"
if (grepl("clear", weather.test)) WC.Sky <- "Clear"
if (grepl("hazy", weather.test)) WC.Sky <- "Hazy"
if (grepl("overcast", weather.test)) WC.Sky <- "Overcast"
# WC.Other
if (grepl("sloppy",weather.test)) WC.Other <- "Sloppy"
if (grepl("breez", weather.test)) WC.Other <- "Windy"
if (grepl("wind", weather.test)) WC.Other <- "Windy"
# WC.Temp
if (grepl("cold", weather.test)) WC.Temp <- "Cold"
if (grepl("freez", weather.test)) WC.Temp <- "Cold"
if (grepl("cool", weather.test)) WC.Temp <- "Cool"
if (grepl("mild", weather.test)) WC.Temp <- "Warm"
if (grepl("warm", weather.test)) WC.Temp <- "Warm"
if (grepl("hot", weather.test)) WC.Temp <- "Hot"
# now check temps
temp <- as.numeric(str_extract(weather.test, "\\-*\\d+\\.*\\d*"))
if (!is.na(temp))
{
if (temp < 45) WC.Temp <- "Cold"
if (temp >= 45 && temp < 60) WC.Temp <- "Cool"
if (temp >= 60 && temp < 75) WC.Temp <- "Warm"
if (temp >= 75) WC.Temp <- "Hot"
}
# Now need to build a dataframe from all the WC variables
ext.weather.df <- data.frame(cbind(WC.Temp, WC.Sky, WC.Prec, WC.Other))
colnames(ext.weather.df) <- c("WC.Temp", "WC.Sky", "WC.Prec", "WC.Other")
# this creates the new row
big.weather.df$WC.Temp[i] <- WC.Temp
big.weather.df$WC.Sky[i] <- WC.Sky
big.weather.df$WC.Prec[i] <- WC.Prec
big.weather.df$WC.Other[i] <- WC.Other
# increment i
i <- i + 1
}
big.weather.df[big.weather.df==""] <- "Unreported"
#big.weather.df <- subset(big.weather.df, select = -Incident.Type)
df.Sky <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Sky))
colnames(df.Sky) <- c("Incident.Type", "Track", "Sky", "Frequency")
df.Prec <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Prec))
colnames(df.Prec) <- c("Incident.Type", "Track", "Prec", "Frequency")
df.Temp <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Temp))
colnames(df.Temp) <- c("Incident.Type", "Track", "Temperature", "Frequency")
df.Other <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Other))
colnames(df.Other) <- c("Incident.Type", "Track", "Other", "Frequency")
#specify the packages of interest
packages=c("reshape2", "ggplot2", "dplyr", "RColorBrewer", "lubridate", "stringr", "tm",
"wordcloud", "alluvial", "treemap", "ggmap", "tidyverse", "jsonlite", "viridis")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(packages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
search()
require(dplyr)
install.packages("plyr",dependencies=TRUE)
library(plyr)
install.packages("plyr", dependencies = TRUE)
nominatim_osm <- function(address = NULL)
{
if(suppressWarnings(is.null(address)))
return(data.frame())
tryCatch(
d <- jsonlite::fromJSON(
gsub('\\@addr\\@', gsub('\\s+', '\\%20', address),
'http://nominatim.openstreetmap.org/search/@addr@?format=json&addressdetails=0&limit=1')
), error = function(c) return(data.frame())
)
if(length(d) == 0) return(data.frame())
return(data.frame(lon = as.numeric(d$lon), lat = as.numeric(d$lat)))
}
#dplyr will be used to stack lists together into a data.frame and to get the pipe operator '%>%'
suppressPackageStartupMessages(library(dplyr))
NewLatLon<-function(addresses){
d <- suppressWarnings(lapply(addresses, function(address) {
#set the elapsed time counter to 0
t <- Sys.time()
#calling the nominatim OSM API
api_output <- nominatim_osm(address)
#get the elapsed time
t <- difftime(Sys.time(), t, 'secs')
#return data.frame with the input address, output of the nominatim_osm function and elapsed time
return(data.frame(address = address, api_output, elapsed_time = t))
}) %>%
#stack the list output into data.frame
bind_rows() %>% data.frame())
#output the data.frame content into console
return(d)
}
# helpful functions for removing spaces
# need to clean out extra spaces from ends of lines
trim.leading<-function(x) {sub("^\\s+","",x)}
trim.trailing<-function(x) {sub("\\s+$","",x)}
trim<-function(x) {sub("^\\s+|\\s+$","",x)}
trimCity<-function(x) {sub("\\,.*$","",x)}
# maybe add weather station?
# should have just put this in a excel file!!!
trackAddress <- function(track.df)
{
track.address <- NULL
if (track == "Aqueduct Racetrack (NYRA)") track.address <- c("110-00 rockaway blvd", "south ozone park", "ny", "11420")
if (track == "Batavia Downs") track.address <- c("8315 park road", "batavia", "ny", "14020")
if (track == "Belmont Park (NYRA)") track.address <- c("2150 hempstead turnpike", "elmont", "ny", "11003")
if (track == "Buffalo Raceway") track.address <- c("5600 mckinley parkway", "hamburg", "ny", "14075")
if (track == "Finger Lakes Gaming & Racetrack") track.address <- c("5857 ny-96", "farmington", "ny", "14425")
if (track == "Monticello Raceway & Mighty M Gaming") track.address <- c("204 ny-17b", "monticello", "ny", "12701")
if (track == "Saratoga Racecourse (NYRA)") track.address <- c("267 union ave", "saratoga springs", "ny", "12866")
if (track == "Saratoga Gaming & Raceway") track.address <- c("342 jefferson street", "saratoga springs", "ny", "12866")
if (track == "Tioga Downs") track.address <- c("2384 w river road", "nichols", "ny", "13812")
if (track == "Vernon Downs") track.address <- c("4229 stuhlman road", "vernon", "ny", "13476")
if (track == "Yonkers Raceway") track.address <- c("810 mclean ave", "yonkers", "ny", "10704")
track.address
}
calculate_mode <- function(x)
{
uniqx <- unique(x)
uniqx[which.max(tabulate(match(x,uniqx)))]
}
# used and replaces ENTIRE column with mode
replaceNAwMode<-function(vec)
{
numcols<-length(colnames(vec))
index<-1
while(index<=numcols)
{
theColV <- vec[,index]
if (is.factor(theColV))
{
theColV[is.na(theColV)]<-calculate_mode(theColV)
vec[,index]<-theColV
}
index<-index+1
}
return(vec)
}
# ----------------- Data Loading -------------------------------------------------
rData <- read.csv("/Users/joycewoznica/IST719/Project/Equine_Death_and_Breakdown.csv",
header = TRUE, na.strings = "NA",
stringsAsFactors = FALSE)
# review missing data
tMissing <-sum(is.na(rData))
cat("The number of missing values in Equine Death and Breakdown Data is ", tMissing)
rData$Weather.Conditions[is.na(rData$Weather.Conditions)] <- "Clear"
# since 2020 is not complete, remove all rows with Year = 2020
index <- which(rData$Year != "2020")
rData <- rData[index,]
#------------------- Add id to rData -------------------
# add id to rData
# need to do an apply or tapply here
track.id <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
track.names <- c("Aqueduct Racetrack (NYRA)", "Batavia Downs", "Belmont Park (NYRA)",
"Buffalo Raceway", "Finger Lakes Gaming & Racetrack",
"Monticello Raceway & Mighty M Gaming", "Saratoga Racecourse (NYRA)",
"Saratoga Gaming & Raceway", "Tioga Downs", "Vernon Downs", "Yonkers Raceway")
rData$id <- track.id[match(rData$Track, track.names)]
# --------------- Interrogte Data ---------------------------------------------------
# force no scientific notation
options(scipen=999)
#--------- Weather Conditions ---------------
# easy weather
inc.by.weather <- as.data.frame(cbind(rData$Track, rData$Incident.Type, rData$Weather.Conditions))
colnames(inc.by.weather) <- c("Track", "Incident.Type", "Weather.Conditions")
#inc.by.weather$id <- as.numeric(inc.by.weather$id)
inc.by.weather <- inc.by.weather[which(inc.by.weather$Weather.Conditions != " "),]
inc.by.weather$Weather.Conditions <- tolower(inc.by.weather$Weather.Conditions)
tot.rows <- length(inc.by.weather$Track)
big.weather.df <- inc.by.weather
big.weather.df$WC.Temp <- ""
big.weather.df$WC.Sky <- ""
big.weather.df$WC.Prec <- ""
big.weather.df$WC.Other <- ""
# weather
# first build a smaller df of just weather information about the incident (that matches up to the incident type)
i <- 1
while (i <= tot.rows)
{
ext.weather.df <- NULL
# NULL out variables
WC.Prec <- ""
WC.Other <- ""
WC.Sky <- ""
WC.Temp <- ""
# get date from the race tack data
weather.test <- inc.by.weather$Weather.Conditions[i]
# now see what matches
# WC.Prec
if (grepl("rain",weather.test)) WC.Prec <- "Rain"
if (grepl("shower", weather.test)) WC.Prec <- "Showers"
if (grepl("fog", weather.test)) WC.Prec <- "Foggy"
if (grepl("thunder", weather.test)) WC.Prec <- "Thunder"
if (grepl("humid", weather.test)) WC.Prec <- "Humid"
if (grepl("muggy", weather.test)) WC.Prec <- "Humid"
if (grepl("dry", weather.test)) WC.Prec <- "Dry"
# WC.Sky
if (grepl("sun", weather.test)) WC.Sky <- "Sunny"
if (grepl("cloud", weather.test)) WC.Sky <- "Cloudy"
if (grepl("clear", weather.test)) WC.Sky <- "Clear"
if (grepl("hazy", weather.test)) WC.Sky <- "Hazy"
if (grepl("overcast", weather.test)) WC.Sky <- "Overcast"
# WC.Other
if (grepl("sloppy",weather.test)) WC.Other <- "Sloppy"
if (grepl("breez", weather.test)) WC.Other <- "Windy"
if (grepl("wind", weather.test)) WC.Other <- "Windy"
# WC.Temp
if (grepl("cold", weather.test)) WC.Temp <- "Cold"
if (grepl("freez", weather.test)) WC.Temp <- "Cold"
if (grepl("cool", weather.test)) WC.Temp <- "Cool"
if (grepl("mild", weather.test)) WC.Temp <- "Warm"
if (grepl("warm", weather.test)) WC.Temp <- "Warm"
if (grepl("hot", weather.test)) WC.Temp <- "Hot"
# now check temps
temp <- as.numeric(str_extract(weather.test, "\\-*\\d+\\.*\\d*"))
if (!is.na(temp))
{
if (temp < 45) WC.Temp <- "Cold"
if (temp >= 45 && temp < 60) WC.Temp <- "Cool"
if (temp >= 60 && temp < 75) WC.Temp <- "Warm"
if (temp >= 75) WC.Temp <- "Hot"
}
# Now need to build a dataframe from all the WC variables
ext.weather.df <- data.frame(cbind(WC.Temp, WC.Sky, WC.Prec, WC.Other))
colnames(ext.weather.df) <- c("WC.Temp", "WC.Sky", "WC.Prec", "WC.Other")
# this creates the new row
big.weather.df$WC.Temp[i] <- WC.Temp
big.weather.df$WC.Sky[i] <- WC.Sky
big.weather.df$WC.Prec[i] <- WC.Prec
big.weather.df$WC.Other[i] <- WC.Other
# increment i
i <- i + 1
}
big.weather.df[big.weather.df==""] <- "Unreported"
#big.weather.df <- subset(big.weather.df, select = -Incident.Type)
df.Sky <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Sky))
colnames(df.Sky) <- c("Incident.Type", "Track", "Sky", "Frequency")
df.Prec <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Prec))
colnames(df.Prec) <- c("Incident.Type", "Track", "Prec", "Frequency")
df.Temp <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Temp))
colnames(df.Temp) <- c("Incident.Type", "Track", "Temperature", "Frequency")
df.Other <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Other))
colnames(df.Other) <- c("Incident.Type", "Track", "Other", "Frequency")
# eliminate 0 frequencies
df.Sky <- df.Sky[which(df.Sky$Frequency >= 1),]
df.Prec <- df.Prec[which(df.Prec$Frequency >= 1),]
df.Temp <- df.Temp[which(df.Temp$Frequency >= 1),]
df.Other <- df.Other[which(df.Sky$Other >= 1),]
# try setting manual shapes and manual colors - make equine death RED
par(mar=c(5,8,4,2))
g <- ggplot(df.Sky, aes(x = Sky, y = Frequency))
g <- g + geom_point(aes(shape = Track, color = Incident.Type))
g <- g + labs(title = "Incident Frequency by Sky Conditions",
subtitle = "by Track and Incident Type")
g <- g + theme(axis.text.x = element_text(angle= 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
g
# Frequency by Sky Conditions
# set color using scale_fill_manual and set 6 values Or haw many
# remove Unknown
df.Sky <- df.Sky[which(df.Sky$Sky != "Unreported"),]
num.colors <- length(df.Sky$Sky)
getPalette = colorRampPalette(brewer.pal(11, "RdYlBu"))
my.cols <- getPalette(num.colors)
# remove unreported
par(mar=c(5,16,4,2))
g <- ggplot(df.Sky, aes(x = Incident.Type, y=Frequency, fill=Sky))
g <- g + geom_boxplot(outlier.colour = "red")
g <- g + labs(title = "Incident Frequency by Sky Conditions",
subtitle = "by Incident Type")
g <- g + theme(axis.text.x = element_text(angle= 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
g
# Sky Box Plot
df.Sky <- df.Sky[which(df.Sky$Sky != "Unreported"),]
unique(df.Sky$Sky)
my.cols <- c("cadetblue", "gray48", "tan3", "darkblue", "firebrick4")
# Frequency by Temp Conditions
g <- ggplot(df.Sky, aes(x = Sky, y=Frequency, color = Sky, fill = Sky))
g <- g + geom_boxplot(alpha=0.7)
g <- g + scale_fill_manual(values=my.cols) + scale_color_manual(values=my.cols)
g
si.test.df <- aggregate(df.Sky$Frequency,
list(Weather=df.Sky$Sky, Incident=df.Sky$Incident.Type), sum)
s.test.df <- aggregate(df.Sky$Frequency,
list(Weather=df.Sky$Sky), sum)
# Weather Sky Conditions
Sky.t.df <- as.data.frame(table(df.Sky))
g <- ggplot(df.Sky, aes(x=Sky, fill=factor(Sky)))
g <- g + labs(title = "Incident Frequency by Sky Conditions",
subtitle="All Incidents with Sky Conditions Reported")
g <- g + geom_bar(position="dodge")
g <- g + scale_fill_manual(name="Sky Conditions", values= my.cols)
g <- g + xlab("Sky Weather Conditions") + ylab("Number of Incidents")
g <- g + theme(axis.text.x = element_text(angle = 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5))
g
# Temp Box Plot
df.Temp <- df.Temp[which(df.Temp$Temperature != "Unreported"),]
unique(df.Temp$Temperature)
my.cols <- c("darkblue", "cornflowerblue", "firebrick4", "tan3")
# Frequency by Temp Conditions
g <- ggplot(df.Temp, aes(x = Temperature, y= Frequency, color = Temperature, fill = Temperature))
g <- g + geom_boxplot(alpha=0.7)
g <- g + scale_fill_manual(values=my.cols) + scale_color_manual(values=my.cols)
g
g <- ggplot(df.Temp, aes(x=Temperature, fill=factor(Temperature)))
g <- g + labs(title = "Incident Frequency by Temperature",
subtitle="All Incidents with Temperature Reported")
g <- g + geom_bar(position="dodge")
g <- g + scale_fill_manual(name="Temperature", values= my.cols)
g <- g + xlab("Reported Temperature") + ylab("Number of Incidents")
g <- g + theme(axis.text.x = element_text(angle = 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5))
g
# Preciptation Box Plot
df.Prec <- df.Prec[which(df.Prec$Prec != "Unreported"),]
my.cols <- c("tan3", "gray48", "firebrick4", "darkblue", "cornflowerblue", "orange")
# Frequency by Temp Conditions
g <- ggplot(df.Prec, aes(x = Prec, y=Frequency, color = Prec, fill = Prec))
g <- g + geom_boxplot(alpha=0.7)
g <- g + scale_fill_manual(values=my.cols) + scale_color_manual(values=my.cols)
g
g <- ggplot(df.Prec, aes(x=Prec, fill=factor(Prec)))
g <- g + labs(title = "Incident Frequency by Precipitation",
subtitle="All Incidents with Precipitation Reported")
g <- g + geom_bar(position="dodge")
g <- g + scale_fill_manual(name="Precipitation", values= my.cols)
g <- g + xlab("Reported Precipitation") + ylab("Number of Incidents")
g <- g + theme(axis.text.x = element_text(angle = 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust=0.5), plot.subtitle = element_text(hjust=0.5))
g
# Can we check how many have both Clear and Hot then Clear and Warm and Clear and Humid and Cloudy and Hot/Warm/Humid
#big.weather.df <- subset(big.weather.df, select = -Incident.Type)
df.Sky <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Sky))
colnames(df.Sky) <- c("Incident.Type", "Track", "Sky", "Frequency")
df.Prec <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Prec))
colnames(df.Prec) <- c("Incident.Type", "Track", "Prec", "Frequency")
df.Temp <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Temp))
colnames(df.Temp) <- c("Incident.Type", "Track", "Temperature", "Frequency")
df.Other <- as.data.frame(table(big.weather.df$Incident.Type, big.weather.df$Track, big.weather.df$WC.Other))
colnames(df.Other) <- c("Incident.Type", "Track", "Other", "Frequency")
# try setting manual shapes and manual colors - make equine death RED
par(mar=c(5,8,4,2))
g <- ggplot(df.Sky, aes(x = Sky, y = Frequency))
g <- g + geom_point(aes(shape = Prec, color = Temp))
g <- g + labs(title = "Incident Frequency by Sky Conditions",
subtitle = "by Track and Incident Type")
g <- g + theme(axis.text.x = element_text(angle= 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
g
# Prec = Humid, Sky = Clear, Temp = Hot or Warm
clear.df <- subset(big.weather.df, WC.Sky == "Clear", select=c(Incident.Type, WC.Sky, WC.Temp, WC.Prec))
hot.humid.df <- subset(clear.df, WC.Temp == "Hot" | WC.Temp = "Warm", select = c(Incident.Type, WC.Sky, WC.Temp, WC.Prec))
hot.humid.df <- subset(clear.df, WC.Temp == "Hot" | WC.Temp == "Warm", select = c(Incident.Type, WC.Sky, WC.Temp, WC.Prec))
hot.humid.df <- subset(clear.df, WC.Temp == "Hot" | WC.Temp == "Warm" | WC.Prec == "Humid", select = c(Incident.Type, WC.Sky, WC.Temp, WC.Prec))
# cold and clear
clear.cold.df <- subset(clear.df, WC.Temp == "Cold", select=c(Track, WC.Sky, WC.Temp, WC.Prec))
# cold and clear
clear.cold.df <- subset(clear.df, WC.Temp == "Cold", select=c(Incident.Type, WC.Sky, WC.Temp, WC.Prec))
# try setting manual shapes and manual colors - make equine death RED
# aggregate?
temp <- apply(hot.humid.df[c(WC.Temp, WC.Prec)], 3, table)
# try setting manual shapes and manual colors - make equine death RED
# aggregate?
temp <- apply(hot.humid.df[c("Incident.Type", "WC.Temp", "WC.Prec")], 3, table)
# try setting manual shapes and manual colors - make equine death RED
# aggregate?
temp <- apply(hot.humid.df[c("Incident.Type", "WC.Temp", "WC.Prec")], 4, table)
# try setting manual shapes and manual colors - make equine death RED
# aggregate?
temp <- apply(hot.humid.df[c("Incident.Type", "WC.Temp", "WC.Prec")], 1, table)
# try setting manual shapes and manual colors - make equine death RED
# aggregate?
temp <- as.data.frame(apply(hot.humid.df[c("Incident.Type", "WC.Temp", "WC.Prec")], 1, table))
View(temp)
View(temp)
# Prec = Humid, Sky = Clear, Temp = Hot or Warm
clear.df <- subset(big.weather.df, WC.Sky == "Clear", select=c(Incident.Type, WC.Temp, WC.Prec))
hot.humid.df <- subset(clear.df, WC.Temp == "Hot" | WC.Temp == "Warm" | WC.Prec == "Humid", select = c(Incident.Type, WC.Temp, WC.Prec))
# cold and clear
clear.cold.df <- subset(clear.df, WC.Temp == "Cold", select=c(Incident.Type, WC.Temp, WC.Prec))
# try setting manual shapes and manual colors - make equine death RED
# aggregate?
for.scatter.df <- as.datda.frame(table(hot.humid.df$Incident.Type, hot.humid.df$WC.Temp, hot.humid.df$WC.Prec))
# try setting manual shapes and manual colors - make equine death RED
# aggregate?
for.scatter.df <- as.data.frame(table(hot.humid.df$Incident.Type, hot.humid.df$WC.Temp, hot.humid.df$WC.Prec))
View(for.scatter.df)
View(for.scatter.df)
colnames(df.Sky) <- c("Incident.Type", "Temperature", "Precipitation", "Frequency")
for.scatter.df <- for.scatter.df[which(for.scatter.df$Frequency >= 1),]
View(for.scatter.df)
# try setting manual shapes and manual colors - make equine death RED
# aggregate?
for.scatter.df <- as.data.frame(table(hot.humid.df$Incident.Type, hot.humid.df$WC.Temp, hot.humid.df$WC.Prec))
(for.scatter.df$Frequency >= 1)
(for.scatter.df$Frequency >= 1)
colnames(for.scatter.df) <- c("Incident.Type", "Temperature", "Precipitation", "Frequency")
for.scatter.df <- for.scatter.df[which(for.scatter.df$Frequency >= 1),]
View(for.scatter.df)
scatter.df <- aggregate(for.scatter.df$Frequency,
list(Precipitation = for.scatter.df$Precipitation, Incident = for.scatter.df$Incident.Type), sum)
View(scatter.df)
View(scatter.df)
scatter.df <- aggregate(for.scatter.df$Frequency,
list(Precipitation = for.scatter.df$Precipitation,
Temperature = for.scatter.df$Temperature,
Incident = for.scatter.df$Incident.Type), sum)
View(scatter.df)
par(mar=c(5,8,4,2))
g <- ggplot(scatter.df, aes(x = Temperature, y = Frequency))
g <- g + geom_point(aes(shape = Precicipation, color = Incident.Type))
g <- g + labs(title = "Incident Frequency by Sky Conditions",
subtitle = "by Track and Incident Type")
g <- g + theme(axis.text.x = element_text(angle= 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
g
par(mar=c(5,8,4,2))
g <- ggplot(scatter.df, aes(x = Temperature, y = Frequency))
g <- g + geom_point(aes(shape = Precipitation, color = Incident.Type))
g <- g + labs(title = "Incident Frequency by Sky Conditions",
subtitle = "by Track and Incident Type")
g <- g + theme(axis.text.x = element_text(angle= 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
g
par(mar=c(5,8,4,2))
g <- ggplot(scatter.df, aes(x = Temperature, y = Frequency))
g <- g + geom_point(aes(shape = Precipitation, color = Incident))
g <- g + labs(title = "Incident Frequency by Sky Conditions",
subtitle = "by Track and Incident Type")
g <- g + theme(axis.text.x = element_text(angle= 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
g
colnames(scatter.df) <- c("Precipitation", "Temperature", "Incident.Type", "Frequency")
par(mar=c(5,8,4,2))
g <- ggplot(scatter.df, aes(x = Temperature, y = Frequency))
g <- g + geom_point(aes(shape = Precipitation, color = Incident.Type))
g <- g + labs(title = "Incident Frequency by Sky Conditions",
subtitle = "by Track and Incident Type")
g <- g + theme(axis.text.x = element_text(angle= 45, hjust = 1))
g <- g + theme(plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5))
g
